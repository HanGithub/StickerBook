/*
 * Tern Tangible Programming Language
 * Copyright (c) 2013 Michael S. Horn
 * 
 *           Michael S. Horn (michael-horn@northwestern.edu)
 *           Northwestern University
 *           2120 Campus Drive
 *           Evanston, IL 60613
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (version 2) as
 * published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
part of StickerBook;


/**
 * A program is simply a list of instructions created by the compiler.
 * Programs may be translated into some other text-based language or
 * interpreted by a virtual machine.
 */
class Program {

	
	/** List of statements recognized in an image */
	List<Statement> statements;
	
   /** High level text-based program generated by tangible blocks */
   String tcode;
   
   /** Assembly code generated from the text-based code */
   String pcode;
   
	/** Rectangle that frames a program in the image */
	double xmin, ymin, xmax, ymax;
	
   
	Program() {
    xmin       = 1600.0;
    ymin       = 1200.0;
    xmax       = 0.0;
    ymax       = 0.0;
    statements = new List<Statement>();
    tcode      = null;
    pcode      = null;
	}
   
   
  void addStatement(Statement s) {
    statements.add(s);
    if (s.hasTopCode) {
      double cx = s.top.x;
      double cy = s.top.y;
      xmax = (cx > xmax)? cx : xmax;
      ymax = (cy > ymax)? cy : ymax;
      xmin = (cx < xmin)? cx : xmin;
      ymin = (cy < ymin)? cy : ymin;
    }
  }


  bool get isEmpty { return (statements.isEmpty); }


  bool get hasStartStatement {
    for (Statement s in statements) {
      if (s.isStartStatement) {
        return true;
      }
    }
    return false;
  }
   
   
  String getTextCode() {
    return tcode;
  }
   
   
  void setTextCode(String tcode) {
    this.tcode = tcode;
  }
   
   
  String getAssemblyCode() {
    return pcode;
  }
   
   
  void setAssemblyCode(String pcode) {
    this.pcode = pcode;
  }
  
  
  void draw(CanvasRenderingContext2D ctx) {

    for (Statement s in statements) {
      for (Connector c in s.connectors) {
        c.draw(ctx);
      }
    }
    
    for (Statement s in statements) {
      if (s.hasTopCode) {
        TopCode top = s.top;
        if (s.isStartStatement || s.hasIncomingConnection) {
          double r = top.radius * 1.5;
          ctx.fillStyle = 'green';
          ctx.beginPath();
          ctx.arc(top.x, top.y, r, 0, PI * 2, true);
          ctx.fill();
        }
        top.draw(ctx, 1.3);
      }
    }
  }
  

/**
 * Returns a bounding box around a program in a bitmap image.
 */
  Rect getBounds() {
    return new Rect(xmin - 100, ymin - 100, (xmax - xmin) + 100, (ymax - ymin) + 100);
  }
}
